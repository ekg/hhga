#!/bin/bash

# set an initial value for the flag
show_help=false
debug=false
region=false
window_size=false
graph_window=false
ref=false
graph_ref=false
ground_truth=false
ground_callable=false
input_bam=false
input_unitigs=false
vcf=false
output_dir=false
sample_name=false
max_depth=0
exponentiate=false
min_count=0
full_overlap=false
min_entropy=0

if [ $# -eq 0 ];
then
    show_help=true
fi

# read the options
TEMP=`getopt -o r:w:W:f:T:B:b:u:v:o:S:x:C:E:Oehd --long region:,window:,graph-window:,fasta-ref:,truth:,targets:,sample:,bam:,vcf:,output:,max-depth:,min-count:,min-entropy:,full-overlap,exponentiate,help,debug -n 'hhga_region' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -r|--region) region=$2 ; shift 2 ;;
        -w|--window) window_size=$2 ; shift 2 ;;
        -W|--graph-window) graph_window=$2 ; shift 2 ;;
        -x|--max-depth) max_depth=$2 ; shift 2 ;;
        -C|--min-count) min_count=$2 ; shift 2 ;;
        -E|--min-entropy) min_entropy=$2 ; shift 2 ;;
        -f|--fasta-ref) ref=$2 ; shift 2 ;;
        -T|--truth) ground_truth=$2 ; shift 2 ;;
        -B|--targets) ground_callable=$2 ; shift 2 ;;
        -b|--bam) input_bam=$2 ; shift 2 ;;
        -u|--unitigs) input_unitigs=$2 ; shift 2 ;;
        -v|--vcf) vcf=$2 ; shift 2 ;;
        -o|--output) output_dir=$2 ; shift 2 ;;
        -S|--sample) sample_name=$2 ; shift 2 ;;
        -e|--exponentiate) exponentiate=true ; shift ;;
        -O|--full-overlap) full_overlap=true ; shift ;;
        -h|--help) show_help=true ; shift ;;
        -d|--debug) debug=true ; shift ;;
        --) shift ; break ;;
        *) echo $2 "Internal error!" ; exit 1 ;;
    esac
done

if [[    $region == false
      || $window_size == false
      || $ref == false
      || $ground_truth == false
      || $ground_callable == false
      || $input_bam == false
      || $vcf == false
      || $output_dir == false
      || $sample_name == false
    ]];
then
    show_help=true
fi

if [ $show_help == true ];
then
    echo "usage: $0 [options]"
    echo "options:"
    echo "    -r, --region arg       the target region"
    echo "    -f, --fasta-ref arg    the FASTA reference genome"
    echo "    -w, --window arg       the window size in base pairs"
    echo "    -W, --graph-window arg the graph window size in base pairs"
    echo "    -x, --max-depth arg    use only the first arg alignments"
    #    echo "    -e, --exponentiate    convert features that come PHRED-scaled to [0,1]"
    echo "    -O, --full-overlap     only print alignments that have no missing cells in the final matrix"
    echo "    -C, --min-count arg    low-frequency error filter; require more than this number of observations to retain"
    echo "    -E, --min-entropy arg  require at list this entropy in the reference window that we require reads to cover"
    echo "    -T, --truth arg        the VCF file used as the truth set"
    echo "    -V, --graph-vcf arg    the VCF file used as the reference graph set"
    echo "    -B, --targets arg      targets to use in the comparison with the truth set"
    echo "    -b, --bam arg          the BAM-format alignment file for the sample we are learning from"
    echo "    -u, --unitigs arg      the BAM-format unitigs file for the sample we are learning from"
    echo "    -v, --vcf arg          the VCF file describing our example genotypes"
    echo "    -o, --output arg       write our output into this directory named dir/region.hhga.gz"
    echo "    -S, --sample arg       the sample name"
    echo "    -d, --debug            turns on debugging"
    echo "    -h, --help             this text"
    echo "    add --debug for debugging output"
    echo "Generates hhga data for this region in the outut directory."
    exit
fi

mkdir -p $output_dir

variant_calls=$vcf

ground_region=$output_dir/$region.ground_truth.vcf.gz
normalized_variants=$output_dir/$region.norm.vcf.gz
callable_variants=$output_dir/$region.callable.vcf.gz
uncallable_variants=$output_dir/$region.uncallable.vcf.gz
labeled_variants=$output_dir/$region.label.vcf.gz
hhga_genotypes=$output_dir/$region.hhga.gz
processed_bam=$output_dir/$region.bam

if [[ $graph_ref == false ]];
then
    graph_ref=$normalized_variants
fi

if [[ $graph_window == false ]];
then
    graph_window=$window_size
fi

tabix -h $ground_truth $region \
    | vcfintersect -b <(zcat $ground_callable) \
    | vcfallelicprimitives -kg \
    | vt normalize -r $ref -q - 2>/dev/null \
    | vcfgeno2haplo -r $ref -w 0 \
    | vcfcreatemulti \
    | vcffixup - \
    | vcfunphase - \
    | vcfnull2ref - \
    | bgziptabix $ground_region

tabix -h $variant_calls $region \
    | vcfallelicprimitives -kg \
    | vt normalize -r $ref -q - 2>/dev/null \
    | vcfgeno2haplo -r $ref -w 0 \
    | vcfcreatemulti \
    | vcffixup - \
    | vcfunphase - \
    | vcfnull2ref - \
    | vcfstreamsort -w 100000 | bgziptabix $normalized_variants

vcfintersect -b <(zcat $ground_callable) $normalized_variants | bgziptabix $callable_variants
vcfintersect -v -b <(zcat $ground_callable) $normalized_variants | bgziptabix $uncallable_variants

zcat $callable_variants \
    | vcfannotategenotypes GT - $ground_region \
    | vcfunphase - \
    | vcfnull2ref - \
    | vcfannotategenotypes truth $callable_variants - \
    | bgziptabix $labeled_variants

samtools view -b $input_bam $region \
    | glia -Rru -w 1500 -S 200 -Q 200 -G 4 -f $ref -v $normalized_variants \
    | bamleftalign -f $ref \
           >$processed_bam.tmp
samtools sort $processed_bam.tmp -o /dev/stdout >$processed_bam
rm -f $processed_bam.tmp
samtools index $processed_bam

hhga -f $ref -r $region \
     -b $processed_bam -v $labeled_variants \
     -w $window_size -x $max_depth \
     -C $min_count \
     -g truth -S $sample_name \
     -V $graph_ref \
     -W $graph_window \
     -E $min_entropy \
     $(if [[ "$full_overlap" != false ]]; then echo --full-overlap; fi) \
     $(if [[ "$input_unitigs" != false ]]; then echo -u $input_unitigs; fi) \
    | gzip >$hhga_genotypes

if [ $debug == false ];
then
    rm -f $ground_region*
    rm -f $normalized_variants*
    rm -f $callable_variants*
    rm -f $uncallable_variants*
    rm -f $labeled_variants*
    rm -f $processed_bam*
fi

